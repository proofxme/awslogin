name: CI

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'fix/**'
      - 'feature/**'
      - 'hotfix/**'
      - 'release/**'
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize
      - reopened

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'

      - name: Run linting
        uses: ./.github/actions/run-lint

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          node-version: ${{ matrix.node-version }}
          coverage: ${{ matrix.node-version == '20' }}

  validate:
    name: Validate Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node

      - name: Validate package
        uses: ./.github/actions/validate-package

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for sensitive data
        run: |
          echo "🔍 Scanning for sensitive data..."

          # Check for potential secrets
          if grep -r -E "(aws_secret_access_key|aws_access_key_id|password|token|secret)" --include="*.js" --exclude-dir=node_modules --exclude-dir=test . | grep -v -E "(test|mock|example|placeholder)" | grep -i -E "=\s*['\"][A-Za-z0-9+/]{20,}['\"]"; then
            echo "⚠️  Warning: Potential secrets found in code"
            exit 1
          fi

          echo "✅ No hardcoded secrets found"

      - name: Check for console.log in production
        run: |
          echo "🔍 Checking for debug statements..."

          # Count console.log statements (excluding tests and help)
          COUNT=$(grep -r "console\.log" --include="*.js" --exclude-dir=test --exclude-dir=node_modules src/ | grep -v -E "(help|wizard|banner|info|error|warning|success)" | wc -l || echo "0")

          if [ "$COUNT" -gt "0" ]; then
            echo "⚠️  Found $COUNT console.log statements in production code"
            echo "Consider using proper logging or removing debug statements"
          else
            echo "✅ No debug console.log statements in production code"
          fi

  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, validate, security]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "# 🎯 CI Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ **Linting**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ **Package Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Package Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [ "${{ needs.lint.result }}" == "success" ] && \
             [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.validate.result }}" == "success" ] && \
             [ "${{ needs.security.result }}" == "success" ]; then
            echo "## ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
            echo "Ready to merge! 🚀" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "## ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi